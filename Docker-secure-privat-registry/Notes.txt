We will start with creating a TLS certificate using openssl and authenticate the users using htpasswd. First of all create a certificate key and certificate with below commands,

mkdir -p docker-registry && cd "$_"
mkdir certs
openssl req -x509 -newkey rsa:4096 -days 365 -nodes -sha256 -keyout certs/tls.key -out certs/tls.crt -subj '/CN=docker-registry' -extensions san -config <(echo '[req]'; echo 'distinguished_name=req';echo '[san]'; echo 'subjectAltName=DNS:docker-registry')


We will now use htpasswd to add user authentication so they can access our docker registry.
cd ..
mkdir auth
docker run --rm --entrypoint htpasswd registry:2.6.2 -Bbn myuser mypasswd > auth/htpasswd

Using Secrets to mount the certificates:
-------------------------------------------------
A Secret, as explained in the official Kubernetes documents, is an object that contains a small amount of sensitive data such as a password, a token, or a key. Such information might otherwise be put in a Pod specification or in a container image. Using a Secret means that you do not need to include confidential data in your application code. 

We will create a TLS type of secret and a Generic type of secret to mount our certificate and password, respectively.

kubectl create secret tls certs-secret --cert=certs/tls.crt --key=certs/tls.key 

This Generic type of Secret will now store our htpasswd file values.

kubectl create secret generic auth-secret --from-file=auth/htpasswd

Creating Persistent Volumes and Claims for repository storage:
-------------------------------------------------------------------
A Persistent Volume is a piece of volume and a cluster resource that you provision just like the nodes of the cluster. A Persistent Volume Claim is a request for storage by a user in the cluster. Just like a Pod consumes node resources, PVCs request and consume PV resources. 

kubectl create -f docker-repo-pv-pvc.yaml

kubectl create -f docker-private-registry.yaml

kubectl create -f docker-registry-svc.yaml

Accessing a Docker registry from a Kubernetes Cluster  :
==============================================================
The docker registry we have created will be our central repository for all docker images the pod deployments will be using to spawn containers in it. Hence, it should be accessible from all points in the cluster.

Saving registry information as environment variables. 

export REGISTRY_NAME="docker-registry"
export REGISTRY_IP="10.107.59.73" (This is clusterIP service IP address)

Copying these environment variable values to the /etc/hosts file to enable all nodes in the cluster to resolve the service-name. 

for x in $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); do ssh root@$x "echo '$REGISTRY_IP $REGISTRY_NAME' >> /etc/hosts"; done

Copying the certificates to appropriate locations 

for x in $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); do ssh root@$x "rm -rf /etc/docker/certs.d/$REGISTRY_NAME:5000;mkdir -p /etc/docker/certs.d/$REGISTRY_NAME:5000"; done

for x in $(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="InternalIP")].address }'); do scp /registry/certs/tls.crt root@$x:/etc/docker/certs.d/$REGISTRY_NAME:5000/ca.crt; done

Testing your Private Docker Registry:
===========================================
docker login docker-registry:5000 -u myuser -p mypasswd

Congratulations on setting up your own hosted docker repository with absolute control. Now, we will make some updates to make it accessible through any node on the cluster. 

kubectl create secret docker-registry reg-cred-secret --docker-server=$REGISTRY_NAME:5000 --docker-username=myuser --docker-password=mypasswd

This created a Secret type of docker-registry that allows all nodes in our cluster to access the registry with the credentials we had created on our first step. 
To check if everything is setup correctly, we will attempt to push a custom image to our private docker registry.  

docker pull nginx
docker tag nginx:latest docker-registry:5000/mynginx:v1
docker push docker-registry:5000/mynginx:v1

kubectl exec docker-registry-pod -it -- sh
ls /var/lib/registry/docker/registry/v2/repositories/

As a final step, we will try to launch a Pod with our recently pushed image.

kubectl run nginx-pod --image=docker-registry:5000/mynginx:v1 --overrides='{ "apiVersion": "v1", "spec": { "imagePullSecrets": [{"name": "reg-cred-secret"}] } }'
